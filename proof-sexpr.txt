(let ((a!1 (not (<= (+ (f x1 0) (* (- 1) x3)) (- 1)))) (a!2 (not (>= (+ (f x1 0) (* (- 1) x3)) 0))) (a!3 (= (>= (f x1 0) x3) (>= (+ (f x1 0) (* (- 1) x3)) 0))) (a!5 (asserted (>= (- x3 (f x1 0)) 1))) (a!6 (= (- x3 (f x1 0)) (+ x3 (* (- 1) (f x1 0))))) (a!7 (>= (+ x3 (* (- 1) (f x1 0))) 1)) (a!9 (= (+ x3 (* (- 1) (f x1 0))) (+ (* (- 1) (f x1 0)) x3))) (a!10 (>= (+ (* (- 1) (f x1 0)) x3) 1))) (let ((a!4 (mp (asserted (>= (f x1 0) x3)) (rewrite a!3) (>= (+ (f x1 0) (* (- 1) x3)) 0))) (a!8 (= (>= (- x3 (f x1 0)) 1) a!7)) (a!11 (= a!10 (<= (+ (f x1 0) (* (- 1) x3)) (- 1)))) (a!12 (= a!7 (<= (+ (f x1 0) (* (- 1) x3)) (- 1))))) (let ((a!13 (mp (mp a!5 (monotonicity (rewrite a!6) a!8) a!7) (trans (monotonicity (rewrite a!9) (= a!7 a!10)) (rewrite a!11) a!12) (<= (+ (f x1 0) (* (- 1) x3)) (- 1))))) (unit-resolution (th-lemma (or a!1 a!2)) a!4 a!13 false))))
